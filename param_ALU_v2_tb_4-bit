library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use work.DigEng.ALL; -- allows use of logarithms

entity param_ALU_tb is
--  testbench empty entity
end param_ALU_tb;

architecture Behavioral of param_ALU_tb is
    constant data_size : NATURAL := 4; -- minimum 3 bits as log2(2)-1 = 1-1, 0 downto 0 error
    signal A : STD_LOGIC_VECTOR (data_size -1 downto 0);
    signal B : STD_LOGIC_VECTOR (data_size -1 downto 0);
    signal opcode : STD_LOGIC_VECTOR (3 downto 0);
    signal SH : UNSIGNED (log2(data_size)-1 downto 0); -- shift address
    signal Output : STD_LOGIC_VECTOR (data_size -1 downto 0); -- ALU output of [data_size] bits
    signal flags : STD_LOGIC_VECTOR(7 downto 0); -- flags encoded in fixed 8-bit bus
    
    type test_vector is record
        A_TV : STD_LOGIC_VECTOR (data_size-1 downto 0); -- A_TV, Test Vector for signal A
        B_TV : STD_LOGIC_VECTOR (data_size-1 downto 0);
        opcode_TV : STD_LOGIC_VECTOR (3 downto 0);   
        SH_TV :  UNSIGNED (log2(data_size)-1 downto 0);
        Output_TV : STD_LOGIC_VECTOR (data_size -1 downto 0);
        flags_TV : STD_LOGIC_VECTOR(7 downto 0);
    end record;
    
    type test_vector_array is array (NATURAL range <>) of test_vector;
            
    constant test_vectors : test_vector_array := (
        --  input A,  input B, opcode,   shift,  output,    flags
            -- ALU operation test vectors
            -- 1. opcode 0 : output = A = 1111 = -7, flags = 00101010
            (b"1111", b"0000", b"0000", b"00", b"1111", b"00101010"),
            -- 2. opcode 4 : output = A&B = 00000, flags = 01100001
            (b"1010", b"0101", b"0100", b"00", b"0000", b"01100001"),
            -- 3. opcode 5 : output = A | B = 1011 = -8+3=-5, flags =  00101010
            (b"1010", b"0001", b"0101", b"00", b"1011", b"00101010"),
            -- 4. opcode 6 : output = A XOR B = 1101 = -8+4+1=-3, flags = 00101010
            (b"1001", b"0100", b"0110", b"00", b"1101", b"00101010"),
            -- 5. opcode 7 : output = !A = 0000 = 0, flags = 01100001
            (b"1111", b"1111", b"0111", b"00", b"0000", b"01100001"),
            -- 6. opcode 8 : output = A + 1 = 0 + 1 = 1, flags = 01010110
            (b"0000", b"1111", b"1000", b"00", b"0001", b"01010110"),
            -- 7. opcode 9 : output = A - 1 = 5 - 1 = 4, flags = 01010010
            (b"0101", b"1111", b"1001", b"00", b"0100", b"01010010"),
            -- 8. opcode 10 : output = A + B = 3 + 4 = 7, flags = 01010010
            (b"0011", b"0100", b"1010", b"00", b"0111", b"01010010"),
            -- 9. opcode 11 : output = A - B = 5 - 4 = 1, 0101 - 0100 = 0001, flags = 01010110
            (b"0101", b"0100", b"1011", b"00", b"0001", b"01010110"),
            -- 10. opcode 12: shift A left SH bits : 1 << 3 = -8, flags = 01010010
            (b"0001", b"1111", b"1100", b"01", b"0010", b"01010010"),
            -- 11 : opcode 13: shift A right SH bits : 2 >> 1 = 1, flags = 01010110
            (b"0010", b"1111", b"1101", b"01", b"0001", b"01010110"),
            -- 12. opcode 14: rotate left SH bits : 2 << 1 = 4, flags = 01010010
            (b"0010", b"0000", b"1110", b"01", b"0100", b"01010010"),
            -- 13. opcode 15: rotate right SH bits : 3 >> 1 = -7, flags = 00101010
            (b"0011", b"1111", b"1111", b"01", b"1001", b"00101010"),
            -- overflow flag test vectors
            -- addition -- opcode 10
            -- case 1.  +A + +B = A + B = -ve - definite flag
            -- 14. 5 + 5 = 10, 0101+0101 = 1010 = -8 + 2 = -6, flags = 10101010 
            (b"0101", b"0101", b"1010", b"00", b"1010", b"10101010"),
            --case 2 -A + -B = -A – B = +ve – definite flag
            -- 15. -5 + -4 = -9, 1011+1100 = [1]0111 = 7, flags = 11010010
            (b"1011", b"1100", b"1010", b"00", b"0111", b"11010010"),
            -- Subtraction
            --3. -A - +B = -B – A = +ve – definite flag
            -- 16. -8 - 4 = -12, 1000 - 0010 = 0100 = 4, flag = 11010010
            (b"1000", b"0100", b"1011", b"00", b"0100", b"11010010"),
            -- A + 1 < A
            -- 17. 7 + 1 = 8, 0111 + 0001 = 1000 = -8, flag = 10101010
            (b"0111", b"0001", b"1000", b"00", b"1000", b"10101010"),
            -- A - 1 > A
            -- 18. -8 - 1 = -9, 1000 - 0001 = 0111 = 7, flag 11010010
            (b"1000", b"0001", b"1001", b"00", b"0111", b"11010010")     
        );
begin

UUT : entity work.param_ALU
        generic map ( size => data_size)
        port map ( A => A, -- configure ports
                   B => B,
                   opcode => opcode,
                   SH => SH,
                   Output => Output,
                   flags => flags);
tb: process 
begin
    wait for 100ns;
    
    for i in test_vectors'range loop -- loop test vectors
        A <= test_vectors(i).A_TV; -- assign vector values
        B <= test_vectors(i).B_TV;
        opcode <= test_vectors(i).opcode_TV;
        SH <= test_vectors(i).SH_TV;
        Output <= test_vectors(i).Output_TV;
        flags <= test_vectors(i).flags_TV;
        wait for 20ns; -- allow propergation
        -- assert correct operation
        assert ((Output = test_vectors(i).Output_TV)
            and (flags = test_vectors(i).flags_TV))
        report -- if output doesn't match expected output
            "Test sequence " &
             integer'image(i+1) &
             " failed : " &
             " A is "&
             integer'image(to_integer(signed(A))) &
             " B is "&
             integer'image(to_integer(signed(B))) &
             ", opcode "&
             integer'image(to_integer(unsigned(opcode)))&
             ", ALU_output : "&
              integer'image(to_integer(signed(Output))) &
             ", expected : "&
              integer'image(to_integer(signed(test_vectors(i).Output_TV)))&
              ", ALU_flags : "&
              std_logic'image(((flags(7))))&
              std_logic'image(((flags(6))))&
              std_logic'image(((flags(5))))&
              std_logic'image(((flags(4))))&
              std_logic'image(((flags(3))))&
              std_logic'image(((flags(2))))&
              std_logic'image(((flags(1))))&
              std_logic'image(((flags(0))))&
              " exp : " &
              std_logic'image(((test_vectors(i).flags_TV(7))))&
              std_logic'image(((test_vectors(i).flags_TV(6))))&
              std_logic'image(((test_vectors(i).flags_TV(5))))&
              std_logic'image(((test_vectors(i).flags_TV(4))))&
              std_logic'image(((test_vectors(i).flags_TV(3))))&
              std_logic'image(((test_vectors(i).flags_TV(2))))&
              std_logic'image(((test_vectors(i).flags_TV(1))))&
              std_logic'image(((test_vectors(i).flags_TV(0))))
        severity warning;
        assert((Output /= test_vectors(i).Output_TV)
                or (flags /= test_vectors(i).flags_TV))
        report -- if output doesn't match expected output
            "Test sequence " &
             integer'image(i+1) &
             " passed : " &
             " A : "&
             integer'image(to_integer(signed(A))) &
             " B : "&
             integer'image(to_integer(signed(B))) &
             ", opcode "&
             integer'image(to_integer(unsigned(opcode)))&
             ", ALU_output : "&
              integer'image(to_integer(signed(Output))) &
             ", expected : "&
              integer'image(to_integer(signed(test_vectors(i).Output_TV)))&
              ", ALU_flags : "&
              std_logic'image(((flags(7))))&
              std_logic'image(((flags(6))))&
              std_logic'image(((flags(5))))&
              std_logic'image(((flags(4))))&
              std_logic'image(((flags(3))))&
              std_logic'image(((flags(2))))&
              std_logic'image(((flags(1))))&
              std_logic'image(((flags(0))))&
              " exp : " &
              std_logic'image(((test_vectors(i).flags_TV(7))))&
              std_logic'image(((test_vectors(i).flags_TV(6))))&
              std_logic'image(((test_vectors(i).flags_TV(5))))&
              std_logic'image(((test_vectors(i).flags_TV(4))))&
              std_logic'image(((test_vectors(i).flags_TV(3))))&
              std_logic'image(((test_vectors(i).flags_TV(2))))&
              std_logic'image(((test_vectors(i).flags_TV(1))))&
              std_logic'image(((test_vectors(i).flags_TV(0))))
        severity note;
        end loop;
    wait;
end process;
end Behavioral;
